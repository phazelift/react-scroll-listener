// Generated by CoffeeScript 1.12.3
(function() {
  var ScrollListener, ScrollListenerMixin, _scrollListeners, getScrollListener, types, uuid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  types = require('types.js');

  uuid = require('uuid');

  ScrollListener = (function() {
    var DEFAULT_TIMEOUT_DELAY;

    DEFAULT_TIMEOUT_DELAY = 300;

    function ScrollListener(settings) {
      this._onHostScroll = bind(this._onHostScroll, this);
      this._onHostScrollEnd = bind(this._onHostScrollEnd, this);
      settings = types.forceObject(settings);
      this.scrollHost = types.forceObject(settings.host);
      this.scrollStartHandlers = {};
      this.scrollEndHandlers = {};
      this.scrollTop = 0;
      this.isScrolling = false;
      this.scrollTimeoutDelay = types.forceNumber(settings.delay, DEFAULT_TIMEOUT_DELAY);
      this._scrollTimeout = void 0;
      this.scrollListenerSet = false;
    }

    ScrollListener.prototype.addScrollEventListener = function() {
      if (this.scrollListenerSet) {
        return;
      }
      if (!this.scrollHost.addEventListener) {
        if ('undefined' === typeof window) {
          return console.log('ScrollListener::addScrollEventListener -> bad or missing host/window, cannot add event-listener!');
        } else {
          this.scrollHost = window;
        }
      }
      this.scrollHost.addEventListener('scroll', this._onHostScroll);
      return this.scrollListenerSet = true;
    };

    ScrollListener.prototype.removeScrollEventListener = function() {
      return this.scrollHost.removeEventListener('scroll', this._onHostScroll);
    };

    ScrollListener.prototype.addScrollHandler = function(id, handler, onScrollEnd) {
      id = types.forceString(id);
      if (!id) {
        return console.log('ScrollListener::addScrollHandler -> cannot add handler without id!');
      }
      handler = types.forceFunction(handler);
      if (onScrollEnd && !this.scrollEndHandlers[id]) {
        this.scrollEndHandlers[id] = handler;
      } else if (!this.scrollStartHandlers[id]) {
        this.scrollStartHandlers[id] = handler;
      }
      return this.addScrollEventListener();
    };

    ScrollListener.prototype.addScrollStartHandler = function(id, handler) {
      return this.addScrollHandler(id, handler);
    };

    ScrollListener.prototype.addScrollEndHandler = function(id, handler) {
      return this.addScrollHandler(id, handler, true);
    };

    ScrollListener.prototype.removeScrollStartHandler = function(id) {
      return delete this.scrollStartHandlers[id];
    };

    ScrollListener.prototype.removeScrollEndHandler = function(id) {
      return delete this.scrollEndHandlers[id];
    };

    ScrollListener.prototype.removeScrollHandlers = function() {
      this.scrollStartHandlers = {};
      return this.scrollEndHandlers = {};
    };

    ScrollListener.prototype._onHostScrollEnd = function(event) {
      var handler, results;
      if (this.scrollTop === this.scrollHost.pageYOffset) {
        clearTimeout(this._scrollTimeout);
        this.isScrolling = false;
        results = [];
        for (handler in this.scrollEndHandlers) {
          results.push(this.scrollEndHandlers[handler](event));
        }
        return results;
      }
    };

    ScrollListener.prototype._onHostScroll = function(event) {
      var handler;
      this.isScrolling = true;
      this.scrollTop = this.scrollHost.pageYOffset;
      clearTimeout(this._scrollTimeout);
      for (handler in this.scrollStartHandlers) {
        this.scrollStartHandlers[handler](event);
      }
      return this._scrollTimeout = setTimeout(this._onHostScrollEnd.bind(this, event), this.scrollTimeoutDelay);
    };

    return ScrollListener;

  })();

  _scrollListeners = {};

  getScrollListener = function(id) {
    return _scrollListeners[id] || (_scrollListeners[id] = new ScrollListener);
  };

  ScrollListenerMixin = function(id) {
    var Mixin, scrollEndId, scrollStartId;
    scrollStartId = uuid.v4();
    scrollEndId = uuid.v4();
    return Mixin = {
      scrollListener: getScrollListener(types.forceString(id, 'generic')),
      componentDidMount: function() {
        this.scrollListener.addScrollStartHandler(scrollStartId, this.onScrollStart);
        return this.scrollListener.addScrollEndHandler(scrollEndId, this.onScrollEnd);
      },
      componentWillUnmount: function() {
        this.scrollListener.removeScrollStartHandler(scrollStartId);
        return this.scrollListener.removeScrollEndHandler(scrollEndId);
      }
    };
  };

  ScrollListener.componentWillMount = function() {
    throw new Error('You are trying to use ScrollListenerMixin as an object, but it\'s a Function! Check the mixin for usage details.');
  };

  ScrollListener.Mixin = ScrollListenerMixin;

  ScrollListener.ScrollListenerMixin = ScrollListenerMixin;

  module.exports = ScrollListener;

}).call(this);
